import{getDirname as e,path as s,fs as t}from"@vuepress/utils";import{watch as a}from"chokidar";import{mergeViteConfig as n,Logger as i}from"vuepress-shared";const l=e(import.meta.url),r=s.resolve(l,"../../styles/empty.scss"),o=new i("vuepress-plugin-sass-palette"),p=e=>t.pathExistsSync(e)?e:r,u=(e,s)=>e.writeTemp(`sass-palette/${s}-inject.scss`,`\n@use "sass:color";\n@use "sass:list";\n@use "sass:math";\n@use "sass:map";\n@use "sass:meta";\n\n@use "@sass-palette/helper";\n@use "@sass-palette/${s}-palette";\n\n$variables: meta.module-variables("${s}-palette");\n\n${e.env.isDebug?`\n@debug "${s} palette variables: #{meta.inspect($variables)}";\n@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";\n`:""}\n\n@each $name, $value in $variables {\n  $key: helper.camel-to-kebab($name);\n\n  @if meta.type-of($value) == number or meta.type-of($value) == string {\n    :root {\n      #{$key}: #{$value};\n    }\n  } @else if helper.color-islegal($value) {\n    @if meta.global-variable-exists("dark-selector", $module: "${s}-config") {\n      @include helper.inject-color($key, $value, $dark-selector: ${s}-config.$dark-selector);\n    } @else {\n      @include helper.inject-color($key, $value);\n    }\n  }\n}\n`),c=(e,{id:s,defaultConfig:t,defaultPalette:a,generator:n,userConfig:i,userPalette:l})=>e.writeTemp(`sass-palette/${s}-config.scss`,`\n@import "file:///${p(a)}";\n@import "file:///${p(t)}";\n@import "file:///${p(l)}";\n@import "file:///${p(i)}";\n@import "file:///${p(n)}";\n`),d=(e,{id:s,defaultPalette:t,generator:a,userPalette:n})=>e.writeTemp(`sass-palette/${s}-palette.scss`,`\n@import "file:///${p(t)}";\n@import "file:///${p(n)}";\n@import "file:///${p(a)}";\n`),f=(e,{id:s,userStyle:t})=>t?e.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${p(t)}";\n`):Promise.resolve(null),$=e(import.meta.url),g=e=>t=>{t.env.isDebug&&o.info(`Options: ${e.toString()}`);const{id:i="hope",config:l=`.vuepress/styles/${i}-config.scss`,defaultConfig:r=s.resolve($,"../../styles/default/config.scss"),palette:p=`.vuepress/styles/${i}-palette.scss`,defaultPalette:g=s.resolve($,"../../styles/default/palette.scss"),generator:m=s.resolve($,"../../styles/empty.scss"),style:v=""}=e,y=t.dir.source(l),h=t.dir.source(p),b=v?t.dir.source(v):null;return{name:"vuepress-plugin-sass-palette",multiple:!0,id:i,alias:{"@sass-palette/helper":s.resolve($,"../../styles/helper.scss"),[`@sass-palette/${i}-config`]:t.dir.temp(`sass-palette/${i}-config.scss`),[`@sass-palette/${i}-inject`]:t.dir.temp(`sass-palette/${i}-inject.scss`),[`@sass-palette/${i}-palette`]:t.dir.temp(`sass-palette/${i}-palette.scss`),...v?{[`@sass-palette/${i}-style`]:t.dir.temp(`sass-palette/${i}-style.scss`)}:{}},extendsBundlerOptions:(e,s)=>{((e,s,t)=>{const{bundler:a}=s.options;if(a.name.endsWith("vite")){const s=e,a=s.viteOptions?.css?.preprocessorOptions?.scss.additionalData;s.viteOptions=n(s.viteOptions||{},{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(e,s)=>{const n="string"==typeof a?`${a}${e}`:"function"==typeof a?await a(e,s):e;return n.match(new RegExp(`@use\\s+["']@sass-palette\\/${t}-config["'];`))?n:`@use "@sass-palette/${t}-config";\n${n}`}}}}})}if(a.name.endsWith("webpack")){const s=e;s.scss||(s.scss={});const{additionalData:a}=s.scss,n=(e,s)=>{const n="string"==typeof a?`${a}${e}`:"function"==typeof a?a(e,s):e;return n.match(new RegExp(`@use\\s+["']@sass-palette\\/${t}-config["'];`))?n:`@use "@sass-palette/${t}-config";\n${n}`};s.scss.additionalData=n}})(e,s,i)},onInitialized:()=>Promise.all([u(t,i),c(t,{id:i,defaultConfig:r,defaultPalette:g,generator:m,userConfig:y,userPalette:h}),d(t,{id:i,defaultPalette:g,generator:m,userPalette:h}),f(t,{id:i,userStyle:b})]).then((()=>{t.env.isDebug&&o.info(`Style file for ${i} generated`)})),onWatched:(e,s)=>{const t=a(y,{cwd:e.dir.source(),ignoreInitial:!0}),n=()=>c(e,{id:i,defaultConfig:r,defaultPalette:g,generator:m,userConfig:y,userPalette:h}).then((()=>{e.env.isDebug&&o.info(`Style file for ${i} updated`)}));t.on("add",(()=>{n()})),t.on("unlink",(()=>{n()})),s.push(t);const l=a(h,{cwd:e.dir.source(),ignoreInitial:!0}),p=()=>Promise.all([c(e,{id:i,defaultConfig:r,defaultPalette:g,generator:m,userConfig:y,userPalette:h}),d(e,{id:i,defaultPalette:g,generator:m,userPalette:h})]).then((()=>{e.env.isDebug&&o.info(`Style file for ${i} updated`)}));if(l.on("add",(()=>{p()})),l.on("unlink",(()=>{p()})),s.push(l),b){const t=a(b,{cwd:e.dir.source(),ignoreInitial:!0}),n=()=>f(e,{id:i,userStyle:b}).then((()=>{e.env.isDebug&&o.info(`Style file for ${i} updated`)}));t.on("add",(()=>{n()})),t.on("unlink",(()=>{n()})),s.push(t)}},clientConfigFile:e=>((e,s)=>e.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";\n\nexport default {};`))(e,i)}},m=(e,s)=>{e.pluginApi.plugins.filter((e=>"vuepress-plugin-sass-palette"===e.name)).every((e=>e.id!==s.id))&&e.use(g(s))},v=(e,s)=>{const t=e.pluginApi.plugins.filter((e=>"vuepress-plugin-sass-palette"===e.name)).findIndex((e=>e.id===s));-1!==t&&e.pluginApi.plugins.splice(t,1)};export{g as default,v as removePalettePlugin,g as sassPalettePlugin,m as useSassPalettePlugin};
//# sourceMappingURL=index.js.map
