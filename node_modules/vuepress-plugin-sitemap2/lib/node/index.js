import{withSpinner as e,chalk as t,fs as a}from"@vuepress/utils";import{Logger as n}from"vuepress-shared";import{isLinkHttp as i,removeEndingSlash as s,removeLeadingSlash as o}from"@vuepress/shared";import{SitemapStream as r}from"sitemap";const p=new n("vuepress-plugin-sitemap2"),l=({options:e,deprecatedOption:t,newOption:a,msg:n="",scope:i=""})=>{if(t in e){if(p.warn(`"${t}" is deprecated${i?` in ${i}`:""}, please use "${a}" instead.${n?`\n${n}`:""}`),a.includes(".")){const n=a.split(".");let i=e;n.forEach(((a,s)=>{s!==n.length-1?(i[a]=i[a]||{},i=i[a]):i[a]=e[t]}))}else e[a]=e[t];delete e[t]}},m=[],c=e=>({defaultPath:e.path.replace(e.pathLocale,"/"),pathLocale:e.pathLocale}),d=async(n,l)=>{const{extraUrls:d=[],xmlNameSpace:u}=l,h=i(l.hostname)?s(l.hostname):`https://${s(l.hostname)}`,f=l.sitemapFilename?o(l.sitemapFilename):"sitemap.xml",{dir:g,options:{base:$}}=n;await e(`Generating sitemap to ${t.cyan(f)}`)((()=>new Promise((e=>{const t=new r({hostname:h,...u?{xmlns:u}:{}}),i=((e,t)=>{const{changefreq:a,excludeUrls:n=["/404.html"],modifyTimeGetter:i=(e=>e.data.git?.updatedTime?new Date(e.data.git.updatedTime).toISOString():"")}=t,{pages:s,options:{base:r,locales:l}}=e,d=s.reduce(((e,t)=>{const{defaultPath:a,pathLocale:n}=c(t),i=e.get(a)||[];return i.push(n),e.set(a,i)}),new Map),u=new Map;return s.forEach((t=>{const s=t.frontmatter.sitemap||{},h=(t.frontmatter.head||[]).find((e=>"robots"===e[1].name));if((h?(h[1].content||"").split(/,/u).map((e=>e.trim())).includes("noindex"):s.exclude)||n.includes(t.path))return;const f=i(t),{defaultPath:g}=c(t),$=d.get(g)||[];let w=[];$.length>1&&(e.env.isDebug&&$.forEach((e=>{l[e].lang||m.includes(e)||(p.warn(`'lang' option for ${e} is missing`),m.push(e))})),w=$.map((e=>({lang:l[e]?.lang||"en",url:`${r}${o(g.replace(/^\//u,e))}`}))));const x={...a?{changefreq:a}:{},links:w,...f?{lastmod:f}:{},...s};e.env.isDebug&&p.info(`sitemap option for ${t.path}: ${JSON.stringify(x,null,2)}`),u.set(t.path,x)})),u})(n,l),s=g.dest(f),w=a.createWriteStream(s);t.pipe(w),i.forEach(((e,a)=>t.write({url:`${$}${o(a)}`,...e}))),d.forEach((e=>t.write({url:`${$}${o(e)}`}))),t.end((()=>{e()}))}))));const w=g.dest("robots.txt");a.existsSync(w)&&await e(`Appended sitemap path to ${t.cyan("robots.txt")}`)((async()=>{const e=`${(await a.readFile(w,{encoding:"utf8"})).replace(/^Sitemap: .*$/u,"")}\nSitemap: ${h}${$}${f}\n`;await a.writeFile(w,e,{flag:"w"})}))},u=(e,a=!1)=>n=>{a&&(e=>{l({options:e,deprecatedOption:"urls",newOption:"extraUrls"}),l({options:e,deprecatedOption:"exclude",newOption:"excludeUrls"}),l({options:e,deprecatedOption:"outFile",newOption:"sitemapFilename"}),l({options:e,deprecatedOption:"dateFormatter",newOption:"modifyTimeGetter"})})(e),n.env.isDebug&&p.info(`Options: ${e.toString()}`);const i={name:"vuepress-plugin-sitemap2"};return e.hostname?{...i,onGenerated:t=>d(t,e)}:(p.error(`Option ${t.magenta("hostname")} is required!`),i)};export{u as default,u as sitemapPlugin};
//# sourceMappingURL=index.js.map
